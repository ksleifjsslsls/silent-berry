// Generated by Molecule 0.8.0
#![allow(
    clippy::needless_lifetimes,
    clippy::needless_borrow,
    clippy::derivable_impls,
    clippy::clone_on_copy,
    clippy::write_literal,
    clippy::if_same_then_else,
    clippy::useless_conversion,
    clippy::redundant_slicing
)]

use super::blockchain::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct BuyIntentData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for BuyIntentData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for BuyIntentData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for BuyIntentData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "dob_selling_script_hash",
            self.dob_selling_script_hash()
        )?;
        write!(f, ", {}: {}", "xudt_script_hash", self.xudt_script_hash())?;
        write!(f, ", {}: {}", "asset_amount", self.asset_amount())?;
        write!(f, ", {}: {}", "min_capacity", self.min_capacity())?;
        write!(
            f,
            ", {}: {}",
            "change_script_hash",
            self.change_script_hash()
        )?;
        write!(f, ", {}: {}", "expire_since", self.expire_since())?;
        write!(f, ", {}: {}", "owner_script_hash", self.owner_script_hash())?;
        write!(f, ", {}: {}", "change_location", self.change_location())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for BuyIntentData {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        BuyIntentData::new_unchecked(v)
    }
}
impl BuyIntentData {
    const DEFAULT_VALUE: [u8; 200] = [
        200, 0, 0, 0, 36, 0, 0, 0, 68, 0, 0, 0, 100, 0, 0, 0, 116, 0, 0, 0, 124, 0, 0, 0, 156, 0,
        0, 0, 164, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 8;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn dob_selling_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn xudt_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn asset_amount(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }
    pub fn min_capacity(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn change_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn expire_since(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn owner_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn change_location(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[36..]) as usize;
            Uint32::new_unchecked(self.0.slice(start..end))
        } else {
            Uint32::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> BuyIntentDataReader<'r> {
        BuyIntentDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for BuyIntentData {
    type Builder = BuyIntentDataBuilder;
    const NAME: &'static str = "BuyIntentData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        BuyIntentData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        BuyIntentDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        BuyIntentDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .dob_selling_script_hash(self.dob_selling_script_hash())
            .xudt_script_hash(self.xudt_script_hash())
            .asset_amount(self.asset_amount())
            .min_capacity(self.min_capacity())
            .change_script_hash(self.change_script_hash())
            .expire_since(self.expire_since())
            .owner_script_hash(self.owner_script_hash())
            .change_location(self.change_location())
    }
}
#[derive(Clone, Copy)]
pub struct BuyIntentDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for BuyIntentDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for BuyIntentDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for BuyIntentDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "dob_selling_script_hash",
            self.dob_selling_script_hash()
        )?;
        write!(f, ", {}: {}", "xudt_script_hash", self.xudt_script_hash())?;
        write!(f, ", {}: {}", "asset_amount", self.asset_amount())?;
        write!(f, ", {}: {}", "min_capacity", self.min_capacity())?;
        write!(
            f,
            ", {}: {}",
            "change_script_hash",
            self.change_script_hash()
        )?;
        write!(f, ", {}: {}", "expire_since", self.expire_since())?;
        write!(f, ", {}: {}", "owner_script_hash", self.owner_script_hash())?;
        write!(f, ", {}: {}", "change_location", self.change_location())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> BuyIntentDataReader<'r> {
    pub const FIELD_COUNT: usize = 8;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn dob_selling_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn xudt_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn asset_amount(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn min_capacity(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn change_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn expire_since(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn owner_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn change_location(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[36..]) as usize;
            Uint32Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Uint32Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for BuyIntentDataReader<'r> {
    type Entity = BuyIntentData;
    const NAME: &'static str = "BuyIntentDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        BuyIntentDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint128Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Uint64Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Byte32Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint64Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Byte32Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Uint32Reader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct BuyIntentDataBuilder {
    pub(crate) dob_selling_script_hash: Byte32,
    pub(crate) xudt_script_hash: Byte32,
    pub(crate) asset_amount: Uint128,
    pub(crate) min_capacity: Uint64,
    pub(crate) change_script_hash: Byte32,
    pub(crate) expire_since: Uint64,
    pub(crate) owner_script_hash: Byte32,
    pub(crate) change_location: Uint32,
}
impl BuyIntentDataBuilder {
    pub const FIELD_COUNT: usize = 8;
    pub fn dob_selling_script_hash(mut self, v: Byte32) -> Self {
        self.dob_selling_script_hash = v;
        self
    }
    pub fn xudt_script_hash(mut self, v: Byte32) -> Self {
        self.xudt_script_hash = v;
        self
    }
    pub fn asset_amount(mut self, v: Uint128) -> Self {
        self.asset_amount = v;
        self
    }
    pub fn min_capacity(mut self, v: Uint64) -> Self {
        self.min_capacity = v;
        self
    }
    pub fn change_script_hash(mut self, v: Byte32) -> Self {
        self.change_script_hash = v;
        self
    }
    pub fn expire_since(mut self, v: Uint64) -> Self {
        self.expire_since = v;
        self
    }
    pub fn owner_script_hash(mut self, v: Byte32) -> Self {
        self.owner_script_hash = v;
        self
    }
    pub fn change_location(mut self, v: Uint32) -> Self {
        self.change_location = v;
        self
    }
}
impl molecule::prelude::Builder for BuyIntentDataBuilder {
    type Entity = BuyIntentData;
    const NAME: &'static str = "BuyIntentDataBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.dob_selling_script_hash.as_slice().len()
            + self.xudt_script_hash.as_slice().len()
            + self.asset_amount.as_slice().len()
            + self.min_capacity.as_slice().len()
            + self.change_script_hash.as_slice().len()
            + self.expire_since.as_slice().len()
            + self.owner_script_hash.as_slice().len()
            + self.change_location.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.dob_selling_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.xudt_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.asset_amount.as_slice().len();
        offsets.push(total_size);
        total_size += self.min_capacity.as_slice().len();
        offsets.push(total_size);
        total_size += self.change_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.expire_since.as_slice().len();
        offsets.push(total_size);
        total_size += self.owner_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.change_location.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.dob_selling_script_hash.as_slice())?;
        writer.write_all(self.xudt_script_hash.as_slice())?;
        writer.write_all(self.asset_amount.as_slice())?;
        writer.write_all(self.min_capacity.as_slice())?;
        writer.write_all(self.change_script_hash.as_slice())?;
        writer.write_all(self.expire_since.as_slice())?;
        writer.write_all(self.owner_script_hash.as_slice())?;
        writer.write_all(self.change_location.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        BuyIntentData::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct DobSellingData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DobSellingData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DobSellingData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DobSellingData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "account_book_script_hash",
            self.account_book_script_hash()
        )?;
        write!(f, ", {}: {}", "spore_data_hash", self.spore_data_hash())?;
        write!(
            f,
            ", {}: {}",
            "buy_intent_code_hash",
            self.buy_intent_code_hash()
        )?;
        write!(f, ", {}: {}", "owner_script_hash", self.owner_script_hash())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for DobSellingData {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        DobSellingData::new_unchecked(v)
    }
}
impl DobSellingData {
    const DEFAULT_VALUE: [u8; 148] = [
        148, 0, 0, 0, 20, 0, 0, 0, 52, 0, 0, 0, 84, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account_book_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn spore_data_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn buy_intent_code_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn owner_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            Byte32::new_unchecked(self.0.slice(start..end))
        } else {
            Byte32::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> DobSellingDataReader<'r> {
        DobSellingDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DobSellingData {
    type Builder = DobSellingDataBuilder;
    const NAME: &'static str = "DobSellingData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DobSellingData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DobSellingDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DobSellingDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .account_book_script_hash(self.account_book_script_hash())
            .spore_data_hash(self.spore_data_hash())
            .buy_intent_code_hash(self.buy_intent_code_hash())
            .owner_script_hash(self.owner_script_hash())
    }
}
#[derive(Clone, Copy)]
pub struct DobSellingDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DobSellingDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DobSellingDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DobSellingDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "account_book_script_hash",
            self.account_book_script_hash()
        )?;
        write!(f, ", {}: {}", "spore_data_hash", self.spore_data_hash())?;
        write!(
            f,
            ", {}: {}",
            "buy_intent_code_hash",
            self.buy_intent_code_hash()
        )?;
        write!(f, ", {}: {}", "owner_script_hash", self.owner_script_hash())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> DobSellingDataReader<'r> {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account_book_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn spore_data_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn buy_intent_code_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn owner_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            Byte32Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Byte32Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for DobSellingDataReader<'r> {
    type Entity = DobSellingData;
    const NAME: &'static str = "DobSellingDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        DobSellingDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Byte32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte32Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct DobSellingDataBuilder {
    pub(crate) account_book_script_hash: Byte32,
    pub(crate) spore_data_hash: Byte32,
    pub(crate) buy_intent_code_hash: Byte32,
    pub(crate) owner_script_hash: Byte32,
}
impl DobSellingDataBuilder {
    pub const FIELD_COUNT: usize = 4;
    pub fn account_book_script_hash(mut self, v: Byte32) -> Self {
        self.account_book_script_hash = v;
        self
    }
    pub fn spore_data_hash(mut self, v: Byte32) -> Self {
        self.spore_data_hash = v;
        self
    }
    pub fn buy_intent_code_hash(mut self, v: Byte32) -> Self {
        self.buy_intent_code_hash = v;
        self
    }
    pub fn owner_script_hash(mut self, v: Byte32) -> Self {
        self.owner_script_hash = v;
        self
    }
}
impl molecule::prelude::Builder for DobSellingDataBuilder {
    type Entity = DobSellingData;
    const NAME: &'static str = "DobSellingDataBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.account_book_script_hash.as_slice().len()
            + self.spore_data_hash.as_slice().len()
            + self.buy_intent_code_hash.as_slice().len()
            + self.owner_script_hash.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.account_book_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.spore_data_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.buy_intent_code_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.owner_script_hash.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.account_book_script_hash.as_slice())?;
        writer.write_all(self.spore_data_hash.as_slice())?;
        writer.write_all(self.buy_intent_code_hash.as_slice())?;
        writer.write_all(self.owner_script_hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DobSellingData::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct AProfit(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for AProfit {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        AProfit::new_unchecked(v)
    }
}
impl AProfit {
    const DEFAULT_VALUE: [u8; 2] = [0, 0];
    pub const TOTAL_SIZE: usize = 2;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 2;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> AProfitReader<'r> {
        AProfitReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AProfit {
    type Builder = AProfitBuilder;
    const NAME: &'static str = "AProfit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AProfit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AProfitReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AProfitReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0(), self.nth1()])
    }
}
#[derive(Clone, Copy)]
pub struct AProfitReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> AProfitReader<'r> {
    pub const TOTAL_SIZE: usize = 2;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 2;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for AProfitReader<'r> {
    type Entity = AProfit;
    const NAME: &'static str = "AProfitReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AProfitReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone)]
pub struct AProfitBuilder(pub(crate) [Byte; 2]);
impl ::core::fmt::Debug for AProfitBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for AProfitBuilder {
    fn default() -> Self {
        AProfitBuilder([Byte::default(), Byte::default()])
    }
}
impl AProfitBuilder {
    pub const TOTAL_SIZE: usize = 2;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 2;
    pub fn set(mut self, v: [Byte; 2]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
}
impl molecule::prelude::Builder for AProfitBuilder {
    type Entity = AProfit;
    const NAME: &'static str = "AProfitBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AProfit::new_unchecked(inner.into())
    }
}
impl From<[Byte; 2usize]> for AProfit {
    fn from(value: [Byte; 2usize]) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl ::core::convert::TryFrom<&[Byte]> for AProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[Byte]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(Self::new_builder()
            .set(<&[Byte; 2usize]>::try_from(value)?.clone())
            .build())
    }
}
impl From<AProfit> for [Byte; 2usize] {
    #[track_caller]
    fn from(value: AProfit) -> Self {
        [value.nth0(), value.nth1()]
    }
}
impl From<[u8; 2usize]> for AProfit {
    fn from(value: [u8; 2usize]) -> Self {
        AProfitReader::new_unchecked(&value).to_entity()
    }
}
impl ::core::convert::TryFrom<&[u8]> for AProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[u8]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(<[u8; 2usize]>::try_from(value)?.into())
    }
}
impl From<AProfit> for [u8; 2usize] {
    #[track_caller]
    fn from(value: AProfit) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<AProfitReader<'a>> for &'a [u8; 2usize] {
    #[track_caller]
    fn from(value: AProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<&'a AProfitReader<'a>> for &'a [u8; 2usize] {
    #[track_caller]
    fn from(value: &'a AProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
#[derive(Clone)]
pub struct BProfit(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for BProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for BProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for BProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for BProfit {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        BProfit::new_unchecked(v)
    }
}
impl BProfit {
    const DEFAULT_VALUE: [u8; 3] = [0, 0, 0];
    pub const TOTAL_SIZE: usize = 3;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 3;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> BProfitReader<'r> {
        BProfitReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for BProfit {
    type Builder = BProfitBuilder;
    const NAME: &'static str = "BProfit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        BProfit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        BProfitReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        BProfitReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0(), self.nth1(), self.nth2()])
    }
}
#[derive(Clone, Copy)]
pub struct BProfitReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for BProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for BProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for BProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> BProfitReader<'r> {
    pub const TOTAL_SIZE: usize = 3;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 3;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for BProfitReader<'r> {
    type Entity = BProfit;
    const NAME: &'static str = "BProfitReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        BProfitReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone)]
pub struct BProfitBuilder(pub(crate) [Byte; 3]);
impl ::core::fmt::Debug for BProfitBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for BProfitBuilder {
    fn default() -> Self {
        BProfitBuilder([Byte::default(), Byte::default(), Byte::default()])
    }
}
impl BProfitBuilder {
    pub const TOTAL_SIZE: usize = 3;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 3;
    pub fn set(mut self, v: [Byte; 3]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
}
impl molecule::prelude::Builder for BProfitBuilder {
    type Entity = BProfit;
    const NAME: &'static str = "BProfitBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        BProfit::new_unchecked(inner.into())
    }
}
impl From<[Byte; 3usize]> for BProfit {
    fn from(value: [Byte; 3usize]) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl ::core::convert::TryFrom<&[Byte]> for BProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[Byte]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(Self::new_builder()
            .set(<&[Byte; 3usize]>::try_from(value)?.clone())
            .build())
    }
}
impl From<BProfit> for [Byte; 3usize] {
    #[track_caller]
    fn from(value: BProfit) -> Self {
        [value.nth0(), value.nth1(), value.nth2()]
    }
}
impl From<[u8; 3usize]> for BProfit {
    fn from(value: [u8; 3usize]) -> Self {
        BProfitReader::new_unchecked(&value).to_entity()
    }
}
impl ::core::convert::TryFrom<&[u8]> for BProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[u8]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(<[u8; 3usize]>::try_from(value)?.into())
    }
}
impl From<BProfit> for [u8; 3usize] {
    #[track_caller]
    fn from(value: BProfit) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<BProfitReader<'a>> for &'a [u8; 3usize] {
    #[track_caller]
    fn from(value: BProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<&'a BProfitReader<'a>> for &'a [u8; 3usize] {
    #[track_caller]
    fn from(value: &'a BProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
#[derive(Clone)]
pub struct CProfit(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for CProfit {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        CProfit::new_unchecked(v)
    }
}
impl CProfit {
    const DEFAULT_VALUE: [u8; 4] = [0, 0, 0, 0];
    pub const TOTAL_SIZE: usize = 4;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 4;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3..4))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> CProfitReader<'r> {
        CProfitReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CProfit {
    type Builder = CProfitBuilder;
    const NAME: &'static str = "CProfit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CProfit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CProfitReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CProfitReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0(), self.nth1(), self.nth2(), self.nth3()])
    }
}
#[derive(Clone, Copy)]
pub struct CProfitReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> CProfitReader<'r> {
    pub const TOTAL_SIZE: usize = 4;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 4;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for CProfitReader<'r> {
    type Entity = CProfit;
    const NAME: &'static str = "CProfitReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        CProfitReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone)]
pub struct CProfitBuilder(pub(crate) [Byte; 4]);
impl ::core::fmt::Debug for CProfitBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for CProfitBuilder {
    fn default() -> Self {
        CProfitBuilder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl CProfitBuilder {
    pub const TOTAL_SIZE: usize = 4;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 4;
    pub fn set(mut self, v: [Byte; 4]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
}
impl molecule::prelude::Builder for CProfitBuilder {
    type Entity = CProfit;
    const NAME: &'static str = "CProfitBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CProfit::new_unchecked(inner.into())
    }
}
impl From<[Byte; 4usize]> for CProfit {
    fn from(value: [Byte; 4usize]) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl ::core::convert::TryFrom<&[Byte]> for CProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[Byte]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(Self::new_builder()
            .set(<&[Byte; 4usize]>::try_from(value)?.clone())
            .build())
    }
}
impl From<CProfit> for [Byte; 4usize] {
    #[track_caller]
    fn from(value: CProfit) -> Self {
        [value.nth0(), value.nth1(), value.nth2(), value.nth3()]
    }
}
impl From<[u8; 4usize]> for CProfit {
    fn from(value: [u8; 4usize]) -> Self {
        CProfitReader::new_unchecked(&value).to_entity()
    }
}
impl ::core::convert::TryFrom<&[u8]> for CProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[u8]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(<[u8; 4usize]>::try_from(value)?.into())
    }
}
impl From<CProfit> for [u8; 4usize] {
    #[track_caller]
    fn from(value: CProfit) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<CProfitReader<'a>> for &'a [u8; 4usize] {
    #[track_caller]
    fn from(value: CProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<&'a CProfitReader<'a>> for &'a [u8; 4usize] {
    #[track_caller]
    fn from(value: &'a CProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
#[derive(Clone)]
pub struct DProfit(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DProfit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for DProfit {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        DProfit::new_unchecked(v)
    }
}
impl DProfit {
    const DEFAULT_VALUE: [u8; 5] = [0, 0, 0, 0, 0];
    pub const TOTAL_SIZE: usize = 5;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 5;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3..4))
    }
    pub fn nth4(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(4..5))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> DProfitReader<'r> {
        DProfitReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DProfit {
    type Builder = DProfitBuilder;
    const NAME: &'static str = "DProfit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DProfit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DProfitReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DProfitReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct DProfitReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DProfitReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> DProfitReader<'r> {
    pub const TOTAL_SIZE: usize = 5;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 5;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn nth4(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[4..5])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for DProfitReader<'r> {
    type Entity = DProfit;
    const NAME: &'static str = "DProfitReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        DProfitReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone)]
pub struct DProfitBuilder(pub(crate) [Byte; 5]);
impl ::core::fmt::Debug for DProfitBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for DProfitBuilder {
    fn default() -> Self {
        DProfitBuilder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl DProfitBuilder {
    pub const TOTAL_SIZE: usize = 5;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 5;
    pub fn set(mut self, v: [Byte; 5]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
}
impl molecule::prelude::Builder for DProfitBuilder {
    type Entity = DProfit;
    const NAME: &'static str = "DProfitBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DProfit::new_unchecked(inner.into())
    }
}
impl From<[Byte; 5usize]> for DProfit {
    fn from(value: [Byte; 5usize]) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl ::core::convert::TryFrom<&[Byte]> for DProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[Byte]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(Self::new_builder()
            .set(<&[Byte; 5usize]>::try_from(value)?.clone())
            .build())
    }
}
impl From<DProfit> for [Byte; 5usize] {
    #[track_caller]
    fn from(value: DProfit) -> Self {
        [
            value.nth0(),
            value.nth1(),
            value.nth2(),
            value.nth3(),
            value.nth4(),
        ]
    }
}
impl From<[u8; 5usize]> for DProfit {
    fn from(value: [u8; 5usize]) -> Self {
        DProfitReader::new_unchecked(&value).to_entity()
    }
}
impl ::core::convert::TryFrom<&[u8]> for DProfit {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[u8]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(<[u8; 5usize]>::try_from(value)?.into())
    }
}
impl From<DProfit> for [u8; 5usize] {
    #[track_caller]
    fn from(value: DProfit) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<DProfitReader<'a>> for &'a [u8; 5usize] {
    #[track_caller]
    fn from(value: DProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<&'a DProfitReader<'a>> for &'a [u8; 5usize] {
    #[track_caller]
    fn from(value: &'a DProfitReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
#[derive(Clone)]
pub struct AccountBookData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AccountBookData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AccountBookData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AccountBookData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "dob_selling_code_hash",
            self.dob_selling_code_hash()
        )?;
        write!(
            f,
            ", {}: {}",
            "buy_intent_code_hash",
            self.buy_intent_code_hash()
        )?;
        write!(
            f,
            ", {}: {}",
            "withdrawal_intent_code_hash",
            self.withdrawal_intent_code_hash()
        )?;
        write!(f, ", {}: {}", "xudt_script_hash", self.xudt_script_hash())?;
        write!(
            f,
            ", {}: {}",
            "input_type_proxy_lock_code_hash",
            self.input_type_proxy_lock_code_hash()
        )?;
        write!(f, ", {}: {}", "cluster_id", self.cluster_id())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for AccountBookData {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        AccountBookData::new_unchecked(v)
    }
}
impl AccountBookData {
    const DEFAULT_VALUE: [u8; 228] = [
        228, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 160, 0, 0, 0, 192, 0, 0,
        0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn dob_selling_code_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn buy_intent_code_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn withdrawal_intent_code_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn xudt_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn input_type_proxy_lock_code_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn cluster_id(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountBookDataReader<'r> {
        AccountBookDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AccountBookData {
    type Builder = AccountBookDataBuilder;
    const NAME: &'static str = "AccountBookData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AccountBookData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountBookDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountBookDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .dob_selling_code_hash(self.dob_selling_code_hash())
            .buy_intent_code_hash(self.buy_intent_code_hash())
            .withdrawal_intent_code_hash(self.withdrawal_intent_code_hash())
            .xudt_script_hash(self.xudt_script_hash())
            .input_type_proxy_lock_code_hash(self.input_type_proxy_lock_code_hash())
            .cluster_id(self.cluster_id())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct AccountBookDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountBookDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountBookDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountBookDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "dob_selling_code_hash",
            self.dob_selling_code_hash()
        )?;
        write!(
            f,
            ", {}: {}",
            "buy_intent_code_hash",
            self.buy_intent_code_hash()
        )?;
        write!(
            f,
            ", {}: {}",
            "withdrawal_intent_code_hash",
            self.withdrawal_intent_code_hash()
        )?;
        write!(f, ", {}: {}", "xudt_script_hash", self.xudt_script_hash())?;
        write!(
            f,
            ", {}: {}",
            "input_type_proxy_lock_code_hash",
            self.input_type_proxy_lock_code_hash()
        )?;
        write!(f, ", {}: {}", "cluster_id", self.cluster_id())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> AccountBookDataReader<'r> {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn dob_selling_code_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn buy_intent_code_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn withdrawal_intent_code_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn xudt_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn input_type_proxy_lock_code_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn cluster_id(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountBookDataReader<'r> {
    type Entity = AccountBookData;
    const NAME: &'static str = "AccountBookDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountBookDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Byte32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte32Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Byte32Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Byte32Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        BytesReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct AccountBookDataBuilder {
    pub(crate) dob_selling_code_hash: Byte32,
    pub(crate) buy_intent_code_hash: Byte32,
    pub(crate) withdrawal_intent_code_hash: Byte32,
    pub(crate) xudt_script_hash: Byte32,
    pub(crate) input_type_proxy_lock_code_hash: Byte32,
    pub(crate) cluster_id: Byte32,
    pub(crate) proof: Bytes,
}
impl AccountBookDataBuilder {
    pub const FIELD_COUNT: usize = 7;
    pub fn dob_selling_code_hash(mut self, v: Byte32) -> Self {
        self.dob_selling_code_hash = v;
        self
    }
    pub fn buy_intent_code_hash(mut self, v: Byte32) -> Self {
        self.buy_intent_code_hash = v;
        self
    }
    pub fn withdrawal_intent_code_hash(mut self, v: Byte32) -> Self {
        self.withdrawal_intent_code_hash = v;
        self
    }
    pub fn xudt_script_hash(mut self, v: Byte32) -> Self {
        self.xudt_script_hash = v;
        self
    }
    pub fn input_type_proxy_lock_code_hash(mut self, v: Byte32) -> Self {
        self.input_type_proxy_lock_code_hash = v;
        self
    }
    pub fn cluster_id(mut self, v: Byte32) -> Self {
        self.cluster_id = v;
        self
    }
    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for AccountBookDataBuilder {
    type Entity = AccountBookData;
    const NAME: &'static str = "AccountBookDataBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.dob_selling_code_hash.as_slice().len()
            + self.buy_intent_code_hash.as_slice().len()
            + self.withdrawal_intent_code_hash.as_slice().len()
            + self.xudt_script_hash.as_slice().len()
            + self.input_type_proxy_lock_code_hash.as_slice().len()
            + self.cluster_id.as_slice().len()
            + self.proof.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.dob_selling_code_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.buy_intent_code_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.withdrawal_intent_code_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.xudt_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.input_type_proxy_lock_code_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.cluster_id.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.dob_selling_code_hash.as_slice())?;
        writer.write_all(self.buy_intent_code_hash.as_slice())?;
        writer.write_all(self.withdrawal_intent_code_hash.as_slice())?;
        writer.write_all(self.xudt_script_hash.as_slice())?;
        writer.write_all(self.input_type_proxy_lock_code_hash.as_slice())?;
        writer.write_all(self.cluster_id.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AccountBookData::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct AccountBookCellData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AccountBookCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AccountBookCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AccountBookCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_root_hash", self.smt_root_hash())?;
        write!(f, ", {}: {}", "member_count", self.member_count())?;
        write!(f, ", {}: {}", "owner_script_hash", self.owner_script_hash())?;
        write!(f, ", {}: {}", "auther_id", self.auther_id())?;
        write!(f, ", {}: {}", "platform_id", self.platform_id())?;
        write!(f, ", {}: {}", "asset_amount", self.asset_amount())?;
        write!(f, ", {}: {}", "a_num", self.a_num())?;
        write!(f, ", {}: {}", "b_num", self.b_num())?;
        write!(f, ", {}: {}", "c_num", self.c_num())?;
        write!(f, ", {}: {}", "a_profit", self.a_profit())?;
        write!(f, ", {}: {}", "b_profit", self.b_profit())?;
        write!(f, ", {}: {}", "c_profit", self.c_profit())?;
        write!(f, ", {}: {}", "d_profit", self.d_profit())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for AccountBookCellData {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        AccountBookCellData::new_unchecked(v)
    }
}
impl AccountBookCellData {
    const DEFAULT_VALUE: [u8; 230] = [
        230, 0, 0, 0, 56, 0, 0, 0, 88, 0, 0, 0, 92, 0, 0, 0, 124, 0, 0, 0, 156, 0, 0, 0, 188, 0, 0,
        0, 204, 0, 0, 0, 208, 0, 0, 0, 212, 0, 0, 0, 216, 0, 0, 0, 218, 0, 0, 0, 221, 0, 0, 0, 225,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 13;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn smt_root_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn member_count(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn owner_script_hash(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn auther_id(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn platform_id(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte32::new_unchecked(self.0.slice(start..end))
    }
    pub fn asset_amount(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }
    pub fn a_num(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn b_num(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn c_num(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn a_profit(&self) -> AProfit {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        AProfit::new_unchecked(self.0.slice(start..end))
    }
    pub fn b_profit(&self) -> BProfit {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        BProfit::new_unchecked(self.0.slice(start..end))
    }
    pub fn c_profit(&self) -> CProfit {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        CProfit::new_unchecked(self.0.slice(start..end))
    }
    pub fn d_profit(&self) -> DProfit {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[56..]) as usize;
            DProfit::new_unchecked(self.0.slice(start..end))
        } else {
            DProfit::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountBookCellDataReader<'r> {
        AccountBookCellDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AccountBookCellData {
    type Builder = AccountBookCellDataBuilder;
    const NAME: &'static str = "AccountBookCellData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AccountBookCellData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountBookCellDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountBookCellDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .smt_root_hash(self.smt_root_hash())
            .member_count(self.member_count())
            .owner_script_hash(self.owner_script_hash())
            .auther_id(self.auther_id())
            .platform_id(self.platform_id())
            .asset_amount(self.asset_amount())
            .a_num(self.a_num())
            .b_num(self.b_num())
            .c_num(self.c_num())
            .a_profit(self.a_profit())
            .b_profit(self.b_profit())
            .c_profit(self.c_profit())
            .d_profit(self.d_profit())
    }
}
#[derive(Clone, Copy)]
pub struct AccountBookCellDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountBookCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountBookCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountBookCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_root_hash", self.smt_root_hash())?;
        write!(f, ", {}: {}", "member_count", self.member_count())?;
        write!(f, ", {}: {}", "owner_script_hash", self.owner_script_hash())?;
        write!(f, ", {}: {}", "auther_id", self.auther_id())?;
        write!(f, ", {}: {}", "platform_id", self.platform_id())?;
        write!(f, ", {}: {}", "asset_amount", self.asset_amount())?;
        write!(f, ", {}: {}", "a_num", self.a_num())?;
        write!(f, ", {}: {}", "b_num", self.b_num())?;
        write!(f, ", {}: {}", "c_num", self.c_num())?;
        write!(f, ", {}: {}", "a_profit", self.a_profit())?;
        write!(f, ", {}: {}", "b_profit", self.b_profit())?;
        write!(f, ", {}: {}", "c_profit", self.c_profit())?;
        write!(f, ", {}: {}", "d_profit", self.d_profit())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> AccountBookCellDataReader<'r> {
    pub const FIELD_COUNT: usize = 13;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn smt_root_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn member_count(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn owner_script_hash(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn auther_id(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn platform_id(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn asset_amount(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn a_num(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn b_num(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn c_num(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn a_profit(&self) -> AProfitReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        AProfitReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn b_profit(&self) -> BProfitReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        BProfitReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn c_profit(&self) -> CProfitReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        CProfitReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn d_profit(&self) -> DProfitReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[56..]) as usize;
            DProfitReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            DProfitReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountBookCellDataReader<'r> {
    type Entity = AccountBookCellData;
    const NAME: &'static str = "AccountBookCellDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountBookCellDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Uint32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Byte32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte32Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Byte32Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint128Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Uint32Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Uint32Reader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        Uint32Reader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        AProfitReader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        BProfitReader::verify(&slice[offsets[10]..offsets[11]], compatible)?;
        CProfitReader::verify(&slice[offsets[11]..offsets[12]], compatible)?;
        DProfitReader::verify(&slice[offsets[12]..offsets[13]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct AccountBookCellDataBuilder {
    pub(crate) smt_root_hash: Byte32,
    pub(crate) member_count: Uint32,
    pub(crate) owner_script_hash: Byte32,
    pub(crate) auther_id: Byte32,
    pub(crate) platform_id: Byte32,
    pub(crate) asset_amount: Uint128,
    pub(crate) a_num: Uint32,
    pub(crate) b_num: Uint32,
    pub(crate) c_num: Uint32,
    pub(crate) a_profit: AProfit,
    pub(crate) b_profit: BProfit,
    pub(crate) c_profit: CProfit,
    pub(crate) d_profit: DProfit,
}
impl AccountBookCellDataBuilder {
    pub const FIELD_COUNT: usize = 13;
    pub fn smt_root_hash(mut self, v: Byte32) -> Self {
        self.smt_root_hash = v;
        self
    }
    pub fn member_count(mut self, v: Uint32) -> Self {
        self.member_count = v;
        self
    }
    pub fn owner_script_hash(mut self, v: Byte32) -> Self {
        self.owner_script_hash = v;
        self
    }
    pub fn auther_id(mut self, v: Byte32) -> Self {
        self.auther_id = v;
        self
    }
    pub fn platform_id(mut self, v: Byte32) -> Self {
        self.platform_id = v;
        self
    }
    pub fn asset_amount(mut self, v: Uint128) -> Self {
        self.asset_amount = v;
        self
    }
    pub fn a_num(mut self, v: Uint32) -> Self {
        self.a_num = v;
        self
    }
    pub fn b_num(mut self, v: Uint32) -> Self {
        self.b_num = v;
        self
    }
    pub fn c_num(mut self, v: Uint32) -> Self {
        self.c_num = v;
        self
    }
    pub fn a_profit(mut self, v: AProfit) -> Self {
        self.a_profit = v;
        self
    }
    pub fn b_profit(mut self, v: BProfit) -> Self {
        self.b_profit = v;
        self
    }
    pub fn c_profit(mut self, v: CProfit) -> Self {
        self.c_profit = v;
        self
    }
    pub fn d_profit(mut self, v: DProfit) -> Self {
        self.d_profit = v;
        self
    }
}
impl molecule::prelude::Builder for AccountBookCellDataBuilder {
    type Entity = AccountBookCellData;
    const NAME: &'static str = "AccountBookCellDataBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.smt_root_hash.as_slice().len()
            + self.member_count.as_slice().len()
            + self.owner_script_hash.as_slice().len()
            + self.auther_id.as_slice().len()
            + self.platform_id.as_slice().len()
            + self.asset_amount.as_slice().len()
            + self.a_num.as_slice().len()
            + self.b_num.as_slice().len()
            + self.c_num.as_slice().len()
            + self.a_profit.as_slice().len()
            + self.b_profit.as_slice().len()
            + self.c_profit.as_slice().len()
            + self.d_profit.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.smt_root_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.member_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.owner_script_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.auther_id.as_slice().len();
        offsets.push(total_size);
        total_size += self.platform_id.as_slice().len();
        offsets.push(total_size);
        total_size += self.asset_amount.as_slice().len();
        offsets.push(total_size);
        total_size += self.a_num.as_slice().len();
        offsets.push(total_size);
        total_size += self.b_num.as_slice().len();
        offsets.push(total_size);
        total_size += self.c_num.as_slice().len();
        offsets.push(total_size);
        total_size += self.a_profit.as_slice().len();
        offsets.push(total_size);
        total_size += self.b_profit.as_slice().len();
        offsets.push(total_size);
        total_size += self.c_profit.as_slice().len();
        offsets.push(total_size);
        total_size += self.d_profit.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.smt_root_hash.as_slice())?;
        writer.write_all(self.member_count.as_slice())?;
        writer.write_all(self.owner_script_hash.as_slice())?;
        writer.write_all(self.auther_id.as_slice())?;
        writer.write_all(self.platform_id.as_slice())?;
        writer.write_all(self.asset_amount.as_slice())?;
        writer.write_all(self.a_num.as_slice())?;
        writer.write_all(self.b_num.as_slice())?;
        writer.write_all(self.c_num.as_slice())?;
        writer.write_all(self.a_profit.as_slice())?;
        writer.write_all(self.b_profit.as_slice())?;
        writer.write_all(self.c_profit.as_slice())?;
        writer.write_all(self.d_profit.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AccountBookCellData::new_unchecked(inner.into())
    }
}
